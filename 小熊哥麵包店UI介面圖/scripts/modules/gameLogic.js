import { gameState } from './gameState.js';
import { updatePlayerInfo, updateInventoryDisplay, updateReportsDisplay, showNotification } from './ui.js';

let soundManager;

export function initializeGameLogic(manager) {
    soundManager = manager;
}

// === Áé©ÂÆ∂Ë≥áÊñôÂäüËÉΩ ===
export function changeName() {
    const newName = prompt('Ë´ãËº∏ÂÖ•Êñ∞ÁöÑÁé©ÂÆ∂ÂêçÁ®±Ôºö', gameState.playerData.name);
    if (newName && newName.trim()) {
        gameState.playerData.name = newName.trim();
        updatePlayerInfo();
        saveGameData();
        
        if (soundManager) {
            soundManager.playSound('success');
        }
        
        alert('ÂêçÁ®±Â∑≤Êõ¥Êñ∞ÔºÅ');
    }
}

export function changeAvatar() {
    const avatars = ['üßë‚Äçüç≥', 'üë®‚Äçüç≥', 'üë©‚Äçüç≥', 'üßë‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüíº', 'üßë', 'üë®', 'üë©'];
    const currentIndex = avatars.indexOf(gameState.playerData.avatar);
    const nextIndex = (currentIndex + 1) % avatars.length;
    
    gameState.playerData.avatar = avatars[nextIndex];
    updatePlayerInfo();
    saveGameData();
    
    if (soundManager) {
        soundManager.playSound('click');
    }
}

// === ÈÄ≤Ë≤®Á≥ªÁµ±ÂäüËÉΩ ===
export function purchaseBread(breadType, cost) {
    const qtyInput = document.getElementById(`${breadType}-qty`);
    const quantity = parseInt(qtyInput.value) || 1;
    const totalCost = cost * quantity;
    
    if (gameState.playerData.coins >= totalCost) {
        gameState.playerData.coins -= totalCost;
        gameState.inventory[breadType] += quantity;
        
        if (soundManager) {
            soundManager.playSound('purchase');
            setTimeout(() => soundManager.playSound('bread'), 200);
        }
        
        updatePlayerInfo();
        updateInventoryDisplay();
        saveGameData();
        
        gameState.reports.totalExpense += totalCost;
        updateReportsDisplay();
        
        alert(`ÊàêÂäüÈÄ≤Ë≤® ${quantity} ÂÄãÔºÅËä±Ë≤ª $${totalCost}`);
    } else {
        if (soundManager) {
            soundManager.playSound('error');
        }
        alert('ÈÅäÊà≤Âπ£‰∏çË∂≥ÔºÅË´ãÂÖàÂÆåÊàêÈÅäÊà≤Ë≥∫ÂèñÊõ¥Â§öÈáëÂπ£„ÄÇ');
    }
}

// === ÈÅäÊà≤‰∏ªË¶ÅÂäüËÉΩ ===
export function setupGameControls() {
    showGameContent('story');
}

function showGameContent(contentType) {
    const storySection = document.getElementById('story-section');
    const questionSection = document.getElementById('question-section');
    
    if (contentType === 'story') {
        storySection.classList.add('active');
        questionSection.classList.remove('active');
        updateStoryDisplay();
    } else if (contentType === 'question') {
        storySection.classList.remove('active');
        questionSection.classList.add('active');
        updateQuestionDisplay();
    }
}

function updateStoryDisplay() {
    const stories = document.querySelectorAll('.story-page');
    const progressElement = document.getElementById('story-progress');
    
    stories.forEach((story, index) => {
        if (index === gameState.gameProgress.currentStory - 1) {
            story.classList.add('active');
        } else {
            story.classList.remove('active');
        }
    });
    
    if (progressElement) {
        progressElement.textContent = `${gameState.gameProgress.currentStory} / ${gameState.gameProgress.totalStories}`;
    }
    
    const prevBtn = document.getElementById('prev-story');
    const nextBtn = document.getElementById('next-story');
    
    if (prevBtn) {
        prevBtn.disabled = gameState.gameProgress.currentStory <= 1;
        prevBtn.style.opacity = gameState.gameProgress.currentStory <= 1 ? '0.5' : '1';
    }
    
    if (nextBtn) {
        if (gameState.gameProgress.currentStory >= gameState.gameProgress.totalStories) {
            nextBtn.textContent = 'ÈñãÂßãÊåëÊà∞';
            nextBtn.onclick = () => {
                gameState.gameProgress.storyCompleted = true;
                showGameContent('question');
            };
        } else {
            nextBtn.textContent = '‰∏ã‰∏ÄÈ†Å';
            nextBtn.disabled = false;
            nextBtn.style.opacity = '1';
        }
    }
}

export function previousStory() {
    if (gameState.gameProgress.currentStory > 1) {
        gameState.gameProgress.currentStory--;
        updateStoryDisplay();
    }
}

export function nextStory() {
    if (gameState.gameProgress.currentStory < gameState.gameProgress.totalStories) {
        gameState.gameProgress.currentStory++;
        updateStoryDisplay();
    }
}

function updateQuestionDisplay() {
    const questions = document.querySelectorAll('.question');
    const progressElement = document.getElementById('question-progress');
    
    questions.forEach((question, index) => {
        if (index === gameState.gameProgress.currentQuestion - 1) {
            question.classList.add('active');
        } else {
            question.classList.remove('active');
        }
    });
    
    if (progressElement) {
        progressElement.textContent = `${gameState.gameProgress.currentQuestion} / ${gameState.gameProgress.totalQuestions}`;
    }
    
    const prevBtn = document.getElementById('prev-question');
    const nextBtn = document.getElementById('next-question');
    
    if (prevBtn) {
        prevBtn.disabled = gameState.gameProgress.currentQuestion <= 1;
        prevBtn.style.opacity = gameState.gameProgress.currentQuestion <= 1 ? '0.5' : '1';
    }
    
    if (nextBtn) {
        if (gameState.gameProgress.currentQuestion >= gameState.gameProgress.totalQuestions) {
            if (gameState.gameProgress.questionsCompleted) {
                nextBtn.textContent = 'ÂÆåÊàêÈÅäÊà≤';
                nextBtn.onclick = () => {
                    alert('ÊÅ≠ÂñúÂÆåÊàêÊâÄÊúâÊåëÊà∞ÔºÅÊÇ®Â∑≤Á∂ìÊéåÊè°‰∫ÜÂü∫Êú¨ÁöÑÈ∫µÂåÖÂ∫óË°åÈä∑Áü•Ë≠òÔºÅ');
                    showSection('reports');
                };
            } else {
                nextBtn.textContent = 'Êü•ÁúãÂ†±Ë°®';
                nextBtn.disabled = true;
                nextBtn.style.opacity = '0.5';
            }
        } else {
            nextBtn.textContent = '‰∏ã‰∏ÄÈ°å';
        }
    }
}

export function previousQuestion() {
    if (gameState.gameProgress.currentQuestion > 1) {
        gameState.gameProgress.currentQuestion--;
        updateQuestionDisplay();
        hideFeedback();
    }
}

export function nextQuestion() {
    if (gameState.gameProgress.currentQuestion < gameState.gameProgress.totalQuestions) {
        gameState.gameProgress.currentQuestion++;
        updateQuestionDisplay();
        hideFeedback();
    }
}

export function selectAnswer(questionId, answer, points) {
    if (soundManager) {
        soundManager.playSound('click');
    }
    
    const feedback = document.getElementById('feedback');
    const feedbackMessages = {
        1: {
            'A': 'Ê≠£Á¢∫ÔºÅÂ≠∏Ê†°ÈôÑËøëÁöÑ‰∏ªË¶ÅÂÆ¢Áæ§Á¢∫ÂØ¶ÊòØÂ≠∏ÁîüÂíåÂπ¥Ëºï‰∫∫„ÄÇ‰ªñÂÄëÊ≥®ÈáçÂÉπÊ†ºÂØ¶ÊÉ†Âíå‰æøÂà©ÊÄßÔºåÈÄôÂ∞çÊÇ®ÁöÑÂÆöÂÉπÁ≠ñÁï•ÂæàÈáçË¶Å„ÄÇ',
            'B': 'ÈÉ®ÂàÜÊ≠£Á¢∫„ÄÇÈõñÁÑ∂ÂèØËÉΩÊúâ‰∏Ä‰∫õÂïÜÂãô‰∫∫Â£´Á∂ìÈÅéÔºå‰ΩÜÂ≠∏Ê†°ÈôÑËøëÁöÑ‰∏ªË¶ÅÂÆ¢Áæ§ÈÇÑÊòØÂ≠∏Áîü„ÄÇ',
            'C': 'ÈúÄË¶ÅÂÜçËÄÉÊÖÆ„ÄÇÈÄÄ‰ºëÈï∑ËÄÖÈÄöÂ∏∏‰∏çÊòØÂ≠∏Ê†°ÈôÑËøëÁöÑ‰∏ªË¶ÅÂÆ¢Áæ§„ÄÇ'
        },
        2: {
            'A': 'Ê≠£Á¢∫ÔºÅÈáùÂ∞çÂ≠∏ÁîüÂÆ¢Áæ§ÔºåÂπ≥ÂÉπË¶™Ê∞ëË∑ØÁ∑öÊòØÊúÄ‰Ω≥ÈÅ∏Êìá„ÄÇÂ≠∏ÁîüÁöÑÊ∂àË≤ªÈ†êÁÆóÊúâÈôêÔºåÂÉπÊ†ºÂØ¶ÊÉ†ËÉΩÂê∏ÂºïÊõ¥Â§öÈ°ßÂÆ¢„ÄÇ',
            'B': '‰∏çÂ§™ÈÅ©Âêà„ÄÇÈ´òÂÉπÁ≤æÂìÅË∑ØÁ∑öÂ∞çÂ≠∏Áîü‰æÜË™™Ë≤†ÊìîÂ§™ÈáçÔºåÂèØËÉΩÊúÉÂ§±Âéª‰∏ªË¶ÅÂÆ¢Áæ§„ÄÇ',
            'C': 'ÂèØ‰ª•ËÄÉÊÖÆÔºå‰ΩÜÂπ≥ÂÉπË∑ØÁ∑öÊõ¥ÈÅ©ÂêàÂ≠∏ÁîüÂÆ¢Áæ§ÁöÑÊ∂àË≤ªÁøíÊÖ£„ÄÇ'
        },
        3: {
            'A': 'Ê≠£Á¢∫ÔºÅÂ≠∏ÁîüË≠âÊâìÊäòÊòØÈáùÂ∞çÁõÆÊ®ôÂÆ¢Áæ§ÁöÑÁ≤æÊ∫ñ‰øÉÈä∑ÔºåÊó¢ËÉΩÂê∏ÂºïÂ≠∏ÁîüÂèàËÉΩÂª∫Á´ãÂìÅÁâåÂø†Ë™†Â∫¶„ÄÇ',
            'B': 'ÊàêÊú¨ËºÉÈ´ò„ÄÇË≤∑‰∏ÄÈÄÅ‰∏ÄÈõñÁÑ∂Âê∏Âºï‰∫∫Ôºå‰ΩÜÊúÉÂ§ßÂπÖÈôç‰ΩéÂà©ÊΩ§Áéá„ÄÇ',
            'C': '‰∏çÈåØÁöÑÈÅ∏ÊìáÔºÅÈõÜÈªûÊ¥ªÂãïËÉΩÂüπÈ§äÂÆ¢Êà∂Âø†Ë™†Â∫¶ÔºåÈÅ©ÂêàÈï∑ÊúüÁ∂ìÁáü„ÄÇ'
        },
        4: {
            'A': 'Ê≠£Á¢∫ÔºÅÂπ¥Ëºï‰∫∫Á∂ìÂ∏∏‰ΩøÁî®Á§æÁæ§Â™íÈ´îÔºåÈÄôÊòØÊúÄÊúâÊïàËß∏ÂèäÂ≠∏ÁîüÂÆ¢Áæ§ÁöÑÂÆ£ÂÇ≥ÁÆ°ÈÅì„ÄÇ',
            'B': 'ÊïàÊûúÊúâÈôê„ÄÇÂ≠∏ÁîüËºÉÂ∞ëÈñ±ËÆÄÂ†±Á¥ôÔºåÈÄôÂÄãÁÆ°ÈÅìÁÑ°Ê≥ïÊúâÊïàËß∏ÂèäÁõÆÊ®ôÂÆ¢Áæ§„ÄÇ',
            'C': 'Êúâ‰∏ÄÂÆöÊïàÊûúÔºå‰ΩÜ‰∏çÂ¶ÇÁ§æÁæ§Â™íÈ´îÁ≤æÊ∫ñÊúâÊïà„ÄÇ'
        }
    };
    
    if (feedback && feedbackMessages[questionId] && feedbackMessages[questionId][answer]) {
        feedback.innerHTML = `
            <h4>ÂõûÁ≠îÂèçÈ•ã</h4>
            <p>${feedbackMessages[questionId][answer]}</p>
            <p><strong>Áç≤ÂæóÈÅäÊà≤Âπ£Ôºö+${points}</strong> üí∞</p>
        `;
        feedback.classList.add('show');
        
        gameState.playerData.coins += points;
        updatePlayerInfo();
        
        if (soundManager && points > 0) {
            setTimeout(() => soundManager.playSound('coin'), 300);
        }
        
        gameState.reports.totalIncome += points;
        gameState.reports.netProfit = gameState.reports.totalIncome - gameState.reports.totalExpense;
        updateReportsDisplay();
        
        if (!gameState.gameProgress.completedQuestions.includes(questionId)) {
            gameState.gameProgress.completedQuestions.push(questionId);
        }
        
        if (gameState.gameProgress.completedQuestions.length === gameState.gameProgress.totalQuestions) {
            gameState.gameProgress.questionsCompleted = true;
            gameState.playerData.level++;
            updatePlayerInfo();
            
            setTimeout(() => {
                alert('ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤ÂÆåÊàêÊâÄÊúâÂïèÈ°åÔºåÁ≠âÁ¥öÊèêÂçá‰∫ÜÔºÅ');
            }, 1000);
        }
        
        saveGameData();
    }
    
    const currentQuestion = document.getElementById(`question-${questionId}`);
    if (currentQuestion) {
        const optionButtons = currentQuestion.querySelectorAll('.option-btn');
        optionButtons.forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.6';
        });
    }
    
    const nextBtn = document.getElementById('next-question');
    if (nextBtn) {
        nextBtn.disabled = false;
        nextBtn.style.opacity = '1';
    }
}

function hideFeedback() {
    const feedback = document.getElementById('feedback');
    if (feedback) {
        feedback.classList.remove('show');
    }
}

// === ÂÑ≤Â≠ò/ËºâÂÖ•ÂäüËÉΩ ===
export function saveGameData() {
    try {
        localStorage.setItem('bearBakeryGameState', JSON.stringify(gameState));
    } catch (error) {
        console.error('ÂÑ≤Â≠òÈÅäÊà≤Ë≥áÊñôÂ§±Êïó:', error);
    }
}

export function resetProgress() {
    if (confirm('Á¢∫ÂÆöË¶ÅÈáçÁΩÆÊâÄÊúâÈÅäÊà≤ÈÄ≤Â∫¶ÂóéÔºüÈÄôÂÄãÊìç‰ΩúÁÑ°Ê≥ïÂæ©ÂéüÔºÅ')) {
        localStorage.removeItem('bearBakeryGameState');
        localStorage.removeItem('bakeryGameData');
        localStorage.removeItem('bearBakeryUsers');
        location.reload();
    }
}

export function exportData() {
    const dataStr = JSON.stringify(gameState, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'bakery-game-data.json';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    alert('ÈÅäÊà≤Ë≥áÊñôÂ∑≤ÂåØÂá∫ÔºÅ');
}
